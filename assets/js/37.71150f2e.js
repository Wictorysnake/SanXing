(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{329:function(a,t,e){"use strict";e.r(t);var r=e(12),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"前端的缓存有哪些-都适用什么场景-区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端的缓存有哪些-都适用什么场景-区别是什么"}},[a._v("#")]),a._v(" 前端的缓存有哪些？都适用什么场景？区别是什么？")]),a._v(" "),t("p",[a._v("前端缓存分为两部分：")]),a._v(" "),t("ul",[t("li",[a._v("HTTP 缓存")]),a._v(" "),t("li",[a._v("浏览器缓存")])]),a._v(" "),t("h2",{attrs:{id:"http-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[a._v("#")]),a._v(" HTTP 缓存")]),a._v(" "),t("p",[a._v("HTTP 缓存分为强缓存和协商缓存。")]),a._v(" "),t("h3",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),t("p",[a._v("强缓存是利用 http 响应头中的 Expires 或者 Cache-Control 两个字段来控制的，这两个字段都是用来表示资源缓存时间的，其中 Expires 是 http1.0 的产物，Cache-Control 是 http1.1 的产物，两者同时存在的话，Cache-Control 优先级高于 Expires。")]),a._v(" "),t("h4",{attrs:{id:"cache-control-值理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-值理解"}},[a._v("#")]),a._v(" Cache-Control 值理解：")]),a._v(" "),t("p",[a._v("max-age：指定设置缓存最大的有效时间，单位为秒，如：Cache-Control:max-age=3600，表示缓存的有效时间为 1 小时。\npublic: 指定响应会被缓存，并且在多用户间共享（如：CDN 缓存），默认为 public。\nprivate: 指定响应只能被单个用户缓存，不能在用户间共享，默认为 private。\nno-cache: 指定不缓存响应，表明资源不进行缓存。\nno-store: 绝对禁止缓存。")]),a._v(" "),t("h4",{attrs:{id:"expires-理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires-理解"}},[a._v("#")]),a._v(" Expires 理解：")]),a._v(" "),t("p",[a._v("缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点，如：Expires: Wed, 22 Oct 2018 08:41:00 GMT，表示资源到期时间为 2018 年 10 月 22 日 08 点 41 分。")]),a._v(" "),t("h4",{attrs:{id:"last-modified-理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-理解"}},[a._v("#")]),a._v(" Last-Modified 理解：")]),a._v(" "),t("p",[a._v("Last-Modified 是一个响应头，服务器在响应请求时告诉浏览器资源的最后修改时间。浏览器下一次请求时，通过 If-Modified-Since 请求头，将该时间发送给服务器，询问服务器在该时间后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304，继续使用缓存。")]),a._v(" "),t("h4",{attrs:{id:"etag-理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag-理解"}},[a._v("#")]),a._v(" Etag 理解：")]),a._v(" "),t("p",[a._v("Etag 是一个响应头，服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。浏览器下一次请求时，通过 If-None-Match 请求头，将该标识发送给服务器，询问服务器该资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304，继续使用缓存。")]),a._v(" "),t("h3",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),t("p",[a._v("协商缓存是利用 http 请求头中的 If-Modified-Since 或者 If-None-Match 字段来控制的，当浏览器发现本地缓存过期后，会向服务器发送请求，通过请求头中的 If-Modified-Since 或者 If-None-Match 字段将本地缓存的值发送给服务器，服务器拿到该值后，与服务器上的资源的 Last-Modified 或者 Etag 进行对比，如果没有变化，则返回 304，继续使用缓存，如果有变化，则返回 200，重新返回资源。")]),a._v(" "),t("h2",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[a._v("#")]),a._v(" 浏览器缓存")]),a._v(" "),t("ul",[t("li",[a._v("Cookie")]),a._v(" "),t("li",[a._v("localStorage")]),a._v(" "),t("li",[a._v("sessionStorage")]),a._v(" "),t("li",[a._v("Service Worker")])]),a._v(" "),t("h3",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[a._v("#")]),a._v(" Cookie")]),a._v(" "),t("p",[a._v("Cookie 主要用于用户信息的存储，容量为 4KB。")]),a._v(" "),t("h3",{attrs:{id:"localstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[a._v("#")]),a._v(" localStorage")]),a._v(" "),t("p",[a._v("localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西，早在 IE 6 时代就已经存在的东西，只不过当时叫做 userData。localStorage 是一个持久化的存储技术，它可以将数据存储在浏览器中，下次打开网页的时候可以直接读取数据。localStorage 容量为 5M。")]),a._v(" "),t("h3",{attrs:{id:"sessionstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[a._v("#")]),a._v(" sessionStorage")]),a._v(" "),t("p",[a._v("sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词，直译过来叫做“会话”，它是一个抽象的概念，一般来说一个 Session 对应着一次会话。而一次会话包含了多次请求和响应。sessionStorage 就是用来存储一次会话中产生的数据的，这些数据只保留到会话结束，关闭浏览器窗口或者浏览器标签页的时候会话就结束了。sessionStorage 容量为 5M。")]),a._v(" "),t("h3",{attrs:{id:"service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[a._v("#")]),a._v(" Service Worker")]),a._v(" "),t("p",[a._v("Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。Service Worker 只是作为浏览器与网络之间的一个代理，拦截浏览器的请求并根据请求从缓存中读取资源或者向缓存中写入资源。Service Worker 有自己独立的 worker 线程，因此它不会阻塞其他的 JavaScript 代码的执行。Service Worker 一般用来实现离线缓存功能，它可以让我们的应用在离线状态下也可以访问，这也是 PWA 的核心功能之一。")])])}),[],!1,null,null,null);t.default=s.exports}}]);